package eu.pb4.polymer.core.api.block;

import eu.pb4.polymer.core.api.utils.PolymerUtils;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.component.type.ProfileComponent;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtOps;
import net.minecraft.network.packet.Packet;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.util.math.BlockPos;
import xyz.nucleoid.packettweaker.PacketContext;

public interface PolymerHeadBlock extends PolymerBlock {
    /**
     * This method is used to determine texture/skin of client sided head
     * Player Skin can be generated by https://mineskin.org/
     *
     * @param state Server-side BlockState
     * @param pos
     * @param context
     * @return Skin Value
     */
    String getPolymerSkinValue(BlockState state, BlockPos pos, PacketContext context);
    default String getPolymerSkinSignature(BlockState state, BlockPos pos, PacketContext context) {
        return null;
    };

    @Override
    default BlockState getPolymerBlockState(BlockState state, PacketContext context) {
        return Blocks.PLAYER_HEAD.getDefaultState();
    }

    /**
     * Creates client-side skull BlockEntity
     *
     * @param state Server-side BlockState
     * @param pos Block's position
     * @return A Packet
     */
    default Packet<?> getPolymerHeadPacket(BlockState state, BlockPos pos, PacketContext context) {
        NbtCompound main = new NbtCompound();
        main.putString("id", "minecraft:skull");
        main.put("profile", ProfileComponent.CODEC.encodeStart(NbtOps.INSTANCE,
                PolymerUtils.createProfileComponent(getPolymerSkinValue(state, pos, context),
                        getPolymerSkinSignature(state, pos, context))).result().get());
        main.putInt("x", pos.getX());
        main.putInt("y", pos.getY());
        main.putInt("z", pos.getZ());
        return PolymerBlockUtils.createBlockEntityPacket(pos, BlockEntityType.SKULL, main);
    }

    @Override
    default void onPolymerBlockSend(BlockState blockState, BlockPos.Mutable pos, PacketContext.NotNullWithPlayer context) {
        context.getPlayer().networkHandler.sendPacket(this.getPolymerHeadPacket(blockState, pos.toImmutable(), context));
    }
}
