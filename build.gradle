plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id("io.github.juuxel.loom-quiltflower") version "1.6.0"
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'fabric-loom'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "polymer-all"
version = project.all_version + "+" + project.minecraft_version
group = project.maven_group


allprojects {
    apply plugin: 'fabric-loom'

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }


    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.

        maven { url "https://jitpack.io" }
        maven { url = "https://maven.nucleoid.xyz/" }
        maven { url = "https://api.modrinth.com/maven" }
        maven { url = "https://maven.gegy.dev/" }
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.bai.lol" }
        maven { url = "https://maven.ryanliptak.com/" }
        maven { url = "https://api.modrinth.com/maven" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url = "https://maven.enginehub.org/repo/" }
        maven { url = "https://maven.theepicblock.nl"; content { includeGroup("nl.theepicblock") } }
        maven { url = 'https://maven.wispforest.io/' }
        maven { url "https://cursemaven.com" }
    }

    dependencies {
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modCompileOnly "net.fabricmc:fabric-loader:${project.loader_version}"
        modLocalRuntime "net.fabricmc:fabric-loader:${project.loader_version}"
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.

        it.options.release = 17
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }
}

subprojects {
    afterEvaluate {
        // Disable the gen sources task on sub projects
        genSourcesWithFernFlower.enabled = false
        genSourcesWithCfr.enabled = false
        unpickJar.enabled = false
    }
}

dependencies {
    include(project(":polymer"))
    include(project(":polymer-blocks"))
    //include(project(":polymer-client-extensions"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

void setupRepositories(RepositoryHandler repositories) {
    def env = System.getenv()

    if (env.MAVEN_URL) {
        repositories.maven {
            credentials {
                username env.MAVEN_USERNAME
                password env.MAVEN_PASSWORD
            }
            url env.MAVEN_URL
        }
    } else {
        repositories.mavenLocal()
    }
}


curseforge {
    if (System.getenv("CURSEFORGE")) {
        apiKey = System.getenv("CURSEFORGE")

        project {
            id = "551890"
            releaseType = "release"
            changelog = System.getenv("CHANGELOG")
            changelogType = "markdown"
            addGameVersion "1.18.2"
            addGameVersion "Fabric"
            mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn("remapJar")
            }
        }
    }

    options {
        forgeGradleIntegration = false
    }
    remapJar {
        finalizedBy project.tasks.curseforge
    }
}

if (System.getenv("MODRINTH")) {
    modrinth {
        token = System.getenv("MODRINTH")
        projectId = 'xGdtZczs'// The ID of your modrinth project, slugs will not work.
        versionNumber = "" + version // The version of the mod to upload.
        uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
        gameVersions = [((String) project.minecraft_version)]
        changelog = System.getenv("CHANGELOG")
        loaders = ["fabric"]
    }

    remapJar {
        finalizedBy project.tasks.modrinth
    }
}


// configure the maven publication

allprojects {
    apply plugin: 'maven-publish'

    afterEvaluate {
        if (!project.version.equals("0.0.0-alpha.0")) {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        groupId = rootProject.maven_group
                        artifactId = project.archivesBaseName
                        version = project.version

                        from components.java
                    }

                }

                setupRepositories(repositories)
            }
        }
    }
}

