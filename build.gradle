plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.3.0'
	id 'maven-publish'
}
def env = System.getenv()

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url "https://jitpack.io" }
	maven { url = "https://maven.nucleoid.xyz/" }
	maven { url = "https://maven.gegy.dev/" }
	maven { url "https://maven.shedaniel.me/" }
	mavenLocal()
}

sourceSets {
	testmod {
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.compileClasspath
	}
}

loom {
	accessWidenerPath = file("src/main/resources/polymer.accesswidener")

	runs {
		testmodClient {
			client()
			ideConfigGenerated project.rootProject == project
			name = "Test Mod Client"
			source sourceSets.testmod
		}
		testmodServer {
			server()
			ideConfigGenerated project.rootProject == project
			name = "Test Mod Server"
			source sourceSets.testmod
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modCompileOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

//	modRuntime "supercoder79:databreaker:0.2.7"

//	modCompileOnly "com.github.CaffeineMC.lithium-fabric:lithium:d2a5d9e"

	modCompileOnly 'com.github.TheEpicBlock:PolyMc:3.3.0'

	//modRuntime 'com.github.TheEpicBlock:PolyMc:3.3.0'

	//modCompileOnly "me.shedaniel:RoughlyEnoughItems-api:6.0.279-alpha"

	modImplementation include(/*"xyz.nucleoid:packet-tweaker:0.2.0+1.17.1"*/ "com.github.arthurbambou:packet-tweaker:1.18-SNAPSHOT")

	modRuntimeOnly "com.github.arthurbambou:Server-Translations:1.18-SNAPSHOT" //"fr.catcore:server-translations-api:1.4.5+1.17"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	testmodImplementation sourceSets.main.output
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.

	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		if (env.MAVEN_URL) {
			maven {
				credentials {
					username env.MAVEN_USERNAME
					password env.MAVEN_PASSWORD
				}
				url env.MAVEN_URL
			}
		} else {
			mavenLocal()
		}
	}
}
