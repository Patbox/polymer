{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Polymer","text":"<p>It's a set of libraries designed for creation of server side content, that work for player's without mods or (required) resource packs! You can create blocks, items and entities, that not only will work fully on server side (and singleplayer), but also are represented on server the same as normal (vanilla/modded) ones allowing for way better mod compatibility and way less weird edge-cases.</p> <p>It is also should be fully compatible with close to all other mods and in case of found issues they are patched as soon as possible.</p>"},{"location":"#user-guides","title":"User guides","text":"<ul> <li>Resource Pack hosting</li> <li>Adding/Overriding assets in Resource Pack</li> </ul>"},{"location":"#mod-development-library-usage","title":"Mod development / Library usage","text":""},{"location":"#polymer-core","title":"Polymer Core","text":"<p><code>eu.pb4:polymer-core</code></p> <p>It's the heart of Polymer. It allows you to create server side content. It also contains lots of extra mod compatibility for client mods, to make your mod better fit for any modpack.</p> <ul> <li>Getting Started</li> <li>Items</li> <li>Blocks</li> <li>Entities</li> <li>Other custom features</li> <li>(Optional) Client Side features</li> </ul>"},{"location":"#polymer-resource-pack","title":"Polymer Resource Pack","text":"<p><code>eu.pb4:polymer-resource-pack</code></p> <p>Allows creating global (and mod specific) resource packs. It also patches PolyMc to make it's resource generation work with polymer.</p> <ul> <li>Getting Started</li> <li>Basics</li> </ul>"},{"location":"#polymer-networking","title":"Polymer Networking","text":"<p><code>eu.pb4:polymer-networking</code></p> <p>Polymer's Networking API. Uses its own custom synchronization code. Contains extra API, more specific that aren't available in fabric.</p> <ul> <li>Getting Started</li> </ul>"},{"location":"#polymer-virtual-entity","title":"Polymer Virtual Entity","text":"<p><code>eu.pb4:polymer-virtual-entity</code></p> <p>Allows you to create virtual/packet based entities in a quick and simple way, with support for attaching to any entity and chunks.</p> <ul> <li>Getting Started</li> <li>Basics</li> </ul>"},{"location":"#polymer-blocks","title":"Polymer Blocks","text":"<p><code>eu.pb4:polymer-blocks</code></p> <p>Extension of Polymer Core and Resource Pack. Allows creation of textured blocks.</p> <ul> <li>Getting Started</li> <li>Basics</li> </ul>"},{"location":"#other-useful-toolsprojects-compatible-with-polymer","title":"Other useful tools/projects compatible with Polymer","text":"<ul> <li>Server Translation API</li> </ul>"},{"location":"other/server-translation-api/","title":"Server Translation API","text":"<p>It's a library for handling translations server side. It supports per player language, by using one provided by client on join/language change.</p>"},{"location":"other/server-translation-api/#adding-as-dependency","title":"Adding as dependency:","text":"<p>Add it to your dependencies like this:</p> <pre><code>repositories {\n    maven { url 'https://maven.nucleoid.xyz' }\n}\n\ndependencies {\n    modImplementation include(\"xyz.nucleoid:server-translations-api:[TAG]\")\n}\n</code></pre> <p>For <code>[TAG]</code>/translations api version I recommend you checking this maven.</p>"},{"location":"other/server-translation-api/#for-versions-before-1194","title":"For versions before 1.19.4:","text":"<pre><code>repositories {\n    maven { url 'https://maven.nucleoid.xyz' }\n}\n\ndependencies {\n    modImplementation include(\"fr.catcore:server-translations-api:[TAG]\")\n}\n</code></pre> <p>For <code>[TAG]</code>/translations api version I recommend you checking this maven.</p>"},{"location":"other/server-translation-api/#usage","title":"Usage","text":"<p>To use it, you just need to use vanilla <code>Text.translation(...)</code> with key specified by you in your code.</p> <p>Then you just need to create <code>data/modid/lang</code> folder in your mod's resources. Then you can create there <code>en_us.json</code> for default translation and similar files for other languages (same format as vanilla translations).</p> <p>Example valid language file looks like this:</p> <pre><code>{\n  \"block.honeytech.pipe\": \"Pipe\",\n  \"block.honeytech.item_extractor\": \"Item Extractor\",\n  \"block.honeytech.trashcan\": \"Trash Can\",\n  \"block.honeytech.cable\": \"Cable\",\n  \"item.honeytech.diamond_dust\": \"Diamond Dust\",\n  \"item.honeytech.raw_aluminium\": \"Raw Aluminium Ore\",\n  \"item.honeytech.aluminium_ingot\": \"Aluminium Ingot\",\n  \"item.honeytech.copper_wire\": \"Copper Wire\",\n  \"item.honeytech.motor\": \"Motor\",\n  \"gui.honeytech.show_recipes\": \"Show Recipes\"\n}\n</code></pre>"},{"location":"other/updating-0.2.x-to-0.3/","title":"Updating from Polymer 0.2.x to 0.3.x","text":""},{"location":"other/updating-0.2.x-to-0.3/#polymer-library-got-split-up","title":"<code>polymer</code> library got split up","text":"<p>The <code>polymer</code> library was broken into multiple ones, most notably:</p> <ul> <li><code>polymer-common</code> - Common code shared between modules</li> <li><code>polymer-core</code> - All core functionality of polymer. Contains everything required for making server side content + client mod compatibility</li> <li><code>polymer-resource-pack</code> - Resource pack support</li> <li><code>polymer-networking</code> - Polymer's previous networking api</li> </ul> <p>All modules (excluding <code>polymer-reg-sync-manipulator</code>) also depend (and include) common module. Core additionally depends on <code>polymer-networking</code>, which is used for client sync.</p> <p>Autohost module now depends only on <code>polymer-networking</code> and <code>polymer-resource-pack</code>.</p>"},{"location":"other/updating-0.2.x-to-0.3/#packagesclass-name-changes","title":"Packages/Class name changes","text":"<p>With the split up, many classes changed their packages.</p> <p><code>polymer-blocks-ext</code> got renamed to <code>polymer-blocks</code></p> <p>From <code>polymer</code> (<code>polymer-core</code>, <code>polymer-resource-pack</code>, <code>polymer-networking</code>)</p> <ul> <li><code>eu.pb4.polymer.api.networking</code> -&gt; <code>eu.pb4.polymer.networking.api</code> (in <code>polymer-networking</code>):<ul> <li><code>PolymerPacketUtils</code> is now <code>PolymerServerNetworking</code> </li> <li>Networking parts of <code>eu.pb4.polymer.api.client.PolymerClientUtils</code> are moved to <code>eu.pb4.polymer.api.networking.PolymerClientNetworking</code></li> </ul> </li> <li><code>eu.pb4.polymer.api.resourcepack</code> -&gt; <code>eu.pb4.polymer.resourcepack.api</code> (in <code>polymer-resource-pack</code>):<ul> <li><code>PolymerRPUtils</code> -&gt; <code>PolymerResourcePackUtils</code></li> <li><code>PolymerRPBuilder</code> -&gt; <code>ResourcePackBuilder</code></li> </ul> </li> <li>Rest of <code>eu.pb4.polymer.api</code> -&gt; <code>eu.pb4.polymer.core.api</code> (in <code>polymer-core</code>):<ul> <li><code>[...].networking.PolymerSyncUtils</code> -&gt; <code>[...].utils.PolymerSyncUtils</code></li> <li><code>PolymerUtils#getPlayer</code> -&gt; <code>PolymerUtils#getPlayerContext</code></li> <li>Interfaces in <code>client</code> that were used on both sides were moved to <code>utils</code></li> <li><code>[...].client.registry</code> -&gt; <code>[...].client</code></li> <li><code>PolymerEntity#modifyTrackedData</code> -&gt; <code>PolymerEntity#modifyRawTrackedData</code></li> <li><code>eu.pb4.polymer.ext.blocks</code> -&gt; <code>eu.pb4.polymer.blocks</code> (in <code>polymer-blocks</code>)</li> </ul> </li> </ul> <p>Additionally, a bunch of method parameters changed to make them more consistent (making ServerPlayerEntity last argument). Many old duplicate context-less methods got removed if they were only accessed by one with player context.</p>"},{"location":"other/updating-0.2.x-to-0.3/#submodule-versioning-change","title":"Submodule versioning change.","text":"<p>All modules now use same version. This mostly makes it easier to update everything, but also makes some version bumps that don't change anything in some.</p>"},{"location":"polymer-blocks/basics/","title":"Basics","text":""},{"location":"polymer-blocks/basics/#creating-a-block","title":"Creating a block.","text":"<p>Creating a block is mostly the same as with regular polymer ones. Only difference is implementation of <code>PolymerTexturedBlock</code> interface, which acts as a marker.</p>"},{"location":"polymer-blocks/basics/#supported-block-shapestypes","title":"Supported block shapes/types","text":"<p>Polymer Blocks supports few types of models/shapes. However, possible amount of blocks is limited, because we can't really add fully custom  blocks on client yet.</p> <p>Every block type has its own functionality and behaviour:</p> <ul> <li><code>FULL_BLOCK</code> - Noteblocks, have full collision and don't allow transparency, (limit: 1149)</li> <li><code>TRANSPARENT_BLOCK</code> - Leaf blocks, allow \"cutout\" textures, (limit: 52)</li> <li><code>TRANSPARENT_BLOCK_WATERLOGGED</code> - Waterlogged leaf blocks, allow \"cutout\" textures, (limit: 52)</li> <li><code>BIOME_TRANSPARENT_BLOCK</code> - Biome tinted leaf blocks, (limit: 78)</li> <li><code>BIOME_TRANSPARENT_BLOCK_WATERLOGGED</code> Waterlogged biome tinted leaf blocks- (limit: 65)</li> <li><code>FARMLAND_BLOCK</code> - Farmland blocks, (limit: 5)</li> <li><code>VINES_BLOCK</code> - All centered vine blocks, Cave Vines, Twisted Vines and Weeping Vines, (limit: 100)</li> <li><code>PLANT_BLOCK</code> - Small plant blocks, mostly saplings, (limit: 7)</li> <li><code>BIOME_PLANT_BLOCK</code> - Biome tinted plant blocks, mostly sugarcane (limit: 15)</li> <li><code>KELP_BLOCK</code> - Just kelp, (limit: 25)</li> <li><code>CACTUS_BLOCK</code> - Just cactus, (limit: 15)</li> <li><code>SCULK_SENSOR_BLOCK</code> - Sculk-sensor and it's calibarated variant, half block high, allows transparency, (limit: 150)</li> <li><code>SCULK_SENSOR_BLOCK_WATERLOGGED</code> - Waterlogged sculk-sensor and it's calibarated variant, half block high, allows transparency, (limit: 150)</li> <li><code>TRIPWIRE_BLOCK</code> - Just Tripwire, allows transparency, (limit: 32)</li> <li><code>TRIPWIRE_BLOCK_FLAT</code> - Flat tripwire block, allows transparency, (limit: 32)</li> <li><code>TOP_SLAB</code> - Top-slabs, (limit: 5)</li> <li><code>TOP_SLAB_WATERLOGGED</code> - Waterlogged top-slabs (limit: 5)</li> <li><code>BOTTOM_SLAB</code> - Bottom slabs, don't allow transparency, (limit: 5)</li> <li><code>BOTTOM_SLAB_WATERLOGGED</code> - Waterlogged bottom-slabs, don't allow transparency (limit: 5)</li> <li><code>TOP_TRAPDOOR</code> - Closed top trapdoor, (limit: 20)</li> <li><code>BOTTOM_TRAPDOOR</code> - Closed bottom trapdoor, (limit: 20)</li> <li><code>NORTH_TRAPDOOR</code> - Open trapdoor facing north, (limit: 20)</li> <li><code>EAST_TRAPDOOR</code> - Open trapdoor facing east, (limit: 20)</li> <li><code>SOUTH_TRAPDOOR</code> - Open trapdoor facing south, (limit: 20)</li> <li><code>WEST_TRAPDOOR</code> - Open trapdoor facing west, (limit: 20)</li> <li><code>TOP_TRAPDOOR_WATERLOGGED</code> - Waterlogged closed top trapdoor, (limit: 20)</li> <li><code>BOTTOM_TRAPDOOR_WATERLOGGED</code> - Waterlogged closed bottom top trapdoor, (limit: 20)</li> <li><code>NORTH_TRAPDOOR_WATERLOGGED</code> - Waterlogged open trapdoor facing north, (limit: 20)</li> <li><code>EAST_TRAPDOOR_WATERLOGGED</code> - Waterlogged open trapdoor facing east, (limit: 20)</li> <li><code>SOUTH_TRAPDOOR_WATERLOGGED</code> - Waterlogged open trapdoor facing south, (limit: 20)</li> <li><code>WEST_TRAPDOOR_WATERLOGGED</code> - Waterlogged open trapdoor facing west, (limit: 20)</li> <li><code>NORTH_DOOR</code> - Door-half facing north, (limit: 160)</li> <li><code>EAST_DOOR</code> - Door-half facing east, (limit: 160)</li> <li><code>SOUTH_DOOR</code> - Door-half facing south, (limit: 160)</li> <li><code>WEST_DOOR</code> - Door-half facing west, (limit: 160)</li> </ul> <p>They all are accessible from <code>BlockModelType</code> enum.</p>"},{"location":"polymer-blocks/basics/#defining-a-global-model","title":"Defining a global model","text":"<p>First thing you do, is creating a model definition. You should do that by calling one of <code>PolymerBlockModel.of(...)</code> methods. It takes the same argument as vanilla definition in <code>assets/(namespace)/blockstate/(block).json</code> file.</p> <p>Then you need to request a model. It's as simple as calling  <code>PolymerBlockResourceUtils.requestBlock(BlockModelType type, PolymerBlockModel... model)</code> with one or more models. It returns a blockstate, that you need to use in your <code>PolymerTexturedBlock</code> as result of <code>getPolymerBlockState(...)</code>. If it runs out of free BlockStates to use, it will return null instead. You can also check amount of free blocks  with <code>PolymerBlockResourceUtils.getBlocksLeft(BlockModelType type)</code>.</p> <p>If you've done everything correctly, it should now display as your model. Otherwise, you either skipped some step or didn't apply server resource pack. Remember that you still need to register your assets with <code>PolymerRPUtils.addAssetSource(String modId)</code> method.</p>"},{"location":"polymer-blocks/basics/#just-keep-in-mind","title":"Just keep in mind","text":"<p>Some block model types have very small amount of free BlockStates. For that reason, while making public registering blocks globally, please allow for disabling of them and handle running out of them for best compatibility and mod support!</p> <p>It is also possible to request an empty blockstate for a BlockModelType using <code>PolymerBlockResourceUtils.requestEmpty(BlockModelType type)</code>. This can be used to display custom blocks using display entities. Just be aware that display entities have a much higher performance impact on clients than normal blocks!</p> <p>Empty models are shared between mods. </p>"},{"location":"polymer-blocks/getting-started/","title":"Getting Started","text":"<p>This is additional module/extension of Polymer, adding support for textured blocks. It requires server resource pack to be active work correctly.</p> <p>It requires Polymer Core and Polymer Resource Pack modules to work.</p>"},{"location":"polymer-blocks/getting-started/#adding-to-dependencies","title":"Adding to dependencies","text":"<pre><code>repositories {\n    maven { url 'https://maven.nucleoid.xyz' } // You should have it\n}\n\ndependencies {\n    modImplementation include(\"eu.pb4:polymer-core:[TAG]\")\n    modImplementation include(\"eu.pb4:polymer-blocks:[TAG]\")\n    modImplementation include(\"eu.pb4:polymer-resource-pack:[TAG]\")\n}\n</code></pre> <p>For <code>[TAG]</code>/polymer-blocks version I recommend you checking this maven.</p> <p>Latest version: </p>"},{"location":"polymer-core/blocks/","title":"Blocks","text":"<p>Note</p> <p>These docs will only take care about polymer-related part of creation of blocks. You might want to see official Fabric Wiki for more in depth look into how to create blocks.  You can skip some client side specific things, as it won't take effect server side  (for example models and textures).</p>"},{"location":"polymer-core/blocks/#creation-of-blocks","title":"Creation of blocks","text":"<p>Creation of blocks, similarly to items, is mostly the same as vanilla. Only real difference is that your blocks need to  implement Polymer's <code>PolymerBlock</code> interface. It exposes few defaulted methods for manipulation of client side visuals.</p>"},{"location":"polymer-core/blocks/#default-implementation","title":"Default implementation","text":"<p>For most basic uses, there are default implementation of <code>PolymerBlock</code>:</p> <ul> <li><code>PolymerHeadBlock</code> - It's an interface (!), that has basic implementation of player head based blocks, you still need to apply it to your Block class,</li> <li><code>SimplePolymerBlock</code> - Same as vanilla <code>Block</code>.</li> </ul>"},{"location":"polymer-core/blocks/#selecting-base-polymer-block-type","title":"Selecting base polymer block type.","text":"<p>To change base block, you need to override <code>Block getPolymerBlock(BlockState state)</code> method.</p> <p>You can also override <code>Block getPolymerBlock(ServerPlayerEntity player, BlockState state)</code> to replace blocks per player, however keep in mind they should ideally have same collisions.</p> <p>Both of these methods can't return null. They can also point to other PolymerBlock instances, but keep in mind to make validation if it's configurable by user!</p> <p>Example use:</p> <p>Making block look like a diamond</p> <pre><code>@Override\npublic Block getPolymerBlock(BlockState state) {\n    return Blocks.BARRIER;\n}\n\npublic Block getPolymerBlock(ServerPlayerEntity player, BlockState state) {\n    return Something.isRedTeam(player) ? Blocks.RED_WOOL : Blocks.BLUE_WOOL;\n}\n</code></pre>"},{"location":"polymer-core/blocks/#changing-client-side-and-collision-blockstates","title":"Changing client-side and collision BlockStates","text":"<p>If you want to change what BlockState will be used for server side collision  and client side you need to override <code>BlockState getPolymerBlockState(BlockState state)</code> method. You can also override <code>BlockState getPolymerBlockState(BlockState state, ServerPlayerEntity player)</code> for player context, similar to <code>getPolymerBlock</code>. You can return other BlockState of PolymerBlock, but keep in mind you can only nest them up to 32!</p> <p>Example use:</p> <p>Changing BlockState to furnace with the same facing, but inverted \"lit\" BlockState property</p> <pre><code>@Override\npublic BlockState getPolymerBlockState(BlockState state) {\n    return Blocks.FURNACE.getDefaultState()\n            .with(AbstractFurnaceBlock.FACING, state.get(AbstractFurnaceBlock.FACING))\n            .with(AbstractFurnaceBlock.LIT, !state.get(AbstractFurnaceBlock.LIT));\n}\n</code></pre>"},{"location":"polymer-core/blocks/#sending-additional-data-signsheads-or-even-custom","title":"Sending additional data (signs/heads or even custom)","text":"<p>In case if you want to send additional (to more customize look on client for signs/heads  or additional data for companion mod), you need to override <code>onPolymerBlockSend(BlockState blockState, BlockPos.Mutable pos, ServerPlayerEntity player)</code>. Technically you can do anything there, but ideally it should be only used for packets.</p> <p>Example use:</p> <p>Sending data required to render player head with skin</p> <pre><code>@Override\npublic void onPolymerBlockSend(BlockState blockState, BlockPos.Mutable pos, ServerPlayerEntity player) { \n    player.networkHandler.sendPacket(this.getPolymerHeadPacket(blockState, pos.toImmutable()));\n}\n</code></pre>"},{"location":"polymer-core/blocks/#using-polymerheadblock","title":"Using PolymerHeadBlock","text":"<p><code>PolymerHeadBlock</code> is an interface extending PolymerBlock with methods prepared for  usage of player heads as a block. To modify texture, you just need to override  <code>String getPolymerSkinValue(BlockState state, BlockPos pos, ServerPlayerEntity entity)</code> which should return texture value.</p> <p>To generate it you can use websites like https://mineskin.org/.</p> <p>Additionally, you can override <code>BlockState getPolymerBlockState(BlockState state)</code>  to change rotation of Player Head Block.</p> <p>Example use:</p> <p>Setting skin value for PolymerHeadBlock</p> <pre><code>@Override\npublic String getPolymerSkinValue(BlockState state, BlockPos pos, ServerPlayerEntity entity) {\n    return \"ewogICJ0aW1lc3RhbXAiIDogMTYxNzk3NjcxOTAzNSwKICAicHJvZmlsZUlkIiA6ICJlZDUzZGQ4MTRmOWQ0YTNjYjRlYjY1MWRjYmE3N2U2NiIsCiAgInByb2ZpbGVOYW1lIiA6ICI0MTQxNDE0MWgiLAogICJzaWduYXR1cmVSZXF1aXJlZCIgOiB0cnVlLAogICJ0ZXh0dXJlcyIgOiB7CiAgICAiU0tJTiIgOiB7CiAgICAgICJ1cmwiIDogImh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNTczNTE0YTIzMjQ1ZjE1ZGJhZDVmYjRlNjIyMTYzMDIwODY0Y2NlNGMxNWQ1NmRlM2FkYjkwZmE1YTcxMzdmZCIKICAgIH0KICB9Cn0\";\n}\n</code></pre>"},{"location":"polymer-core/blocks/#textured-non-player-head-blocks","title":"Textured, non-player-head blocks","text":"<p>See Polymer Textured Blocks extension for more informations</p>"},{"location":"polymer-core/blocks/#using-blockentities","title":"Using BlockEntities","text":"<p>The only thing you need to do to remove BlockEntity from being sent to client is registering its BlockEntityType with <code>PolymerBlockUtils.registerBlockEntity(BlockEntityType types)</code>.</p>"},{"location":"polymer-core/blocks/#getting-polymer-blocks-client-representation","title":"Getting Polymer Blocks client representation","text":"<p>If you want to get client-friendly representation of block, you need to call <code>PolymerBlockUtils.getBlockStateSafely(PolymerBlock block, BlockState blockState)</code> method. It should return block safe to use (or air in case of failure).</p>"},{"location":"polymer-core/blocks/#limitations","title":"Limitations","text":"<p>While it's supported, please limit creation of PolymerBlock light sources. Because of how Minecraft handles light updates on server/client, these can be little laggy (as it needs to be sent updates every time light changes) and not perfect,  as client is emulating light by itself.</p> <p>Similarly, client recalculates some BlockStates, which can cause some desyncs.</p>"},{"location":"polymer-core/client-side/","title":"Client side features","text":"<p>While Polymer by itself is mainly server side api, it includes some  client side functionality for mods to use. It allows you for example to display  vanilla friendly item for normal clients and custom models if it's present on server.</p>"},{"location":"polymer-core/client-side/#keeping-modded-itemblockentity-on-compatible-client","title":"Keeping modded item/block/entity on compatible client.","text":"<p>To keep client side model for loading, you need to implement <code>PolymerKeepModel</code> interface on your modded object. To enable it's decoding, just add <code>PolymerClientDecoded</code> interface for it.</p> <p>After that, you just need to return server side items/block  in corresponding player-aware <code>getPolymerX</code> methods.</p> <p>To \"sync\" presence/version of your mod you can use Polymer's handshake feature.</p> <p>You can do that by registering packets for which you should check Polymer Networking documentation</p> <p>After that you can just validate if player supports it with this check it like this</p> <pre><code>SomeObject getPolymerX(ServerPlayerEntity player) {\n    if (PolymerServerNetworking.getSupportedVersion(player.networkHandler, PACKET_ID) &gt; 0) {\n        // Client state for modded\n        return this;\n    } else {\n        // Client state for vanilla\n        return VanillaObjects.SOMETHING;\n    }}\n</code></pre>"},{"location":"polymer-core/client-side/#this-section-is-incomplete-i-hope-in-code-comments-will-guide-you-well","title":"This section is incomplete... I hope in code comments will guide you well...","text":""},{"location":"polymer-core/entities/","title":"Entities","text":"<p>Note</p> <p>These docs will only take care about polymer-related part of creation of entities. You might want to see official Fabric Wiki for more in depth look into how to create entities.  You can skip most client side specific things, as it won't take effect server side (for example rendering/models)</p>"},{"location":"polymer-core/entities/#creation-of-entities","title":"Creation of entities","text":"<p>Creation of entities is mostly the same as vanilla. You just need to implement <code>PolymerEntity</code> interface on your entity's class. It exposes few defaulted methods for manipulation of client side visuals.</p> <p>You also need to register your entity type as virtual, by using <code>PolymerEntityUtils.registerType(EntityType... types)</code>.</p>"},{"location":"polymer-core/entities/#changing-client-side-entity","title":"Changing client side entity.","text":"<p>To select visual entity type, you just need to override <code>EntityType&lt;?&gt; getPolymerEntityType(ServerPlayerEntity player)</code></p> <p>This method can't return null or another EntityType that points to other virtual entity, as it won't work.</p> <p>Example use:</p> <p>Displaying entity as zombie</p> <pre><code>@Override\npublic EntityType&lt;?&gt; getPolymerEntityType(ServerPlayerEntity player) {\n    return EntityType.ZOMBIE;\n}\n</code></pre>"},{"location":"polymer-core/entities/#modifying-held-items","title":"Modifying held items","text":"<p>You most likely want to modify items held by entity, to indicate its type. To do it you need to override <code>List&lt;Pair&lt;EquipmentSlot, ItemStack&gt;&gt; getPolymerVisibleEquipment(List&lt;Pair&lt;EquipmentSlot, ItemStack&gt;&gt; items, ServerPlayerEntities player)</code>.</p> <p>Example use:</p> <p>Displaying real items with helmet replacement.</p> <pre><code>@Override\npublic List&lt;Pair&lt;EquipmentSlot, ItemStack&gt;&gt; getPolymerVisibleEquipment(List&lt;Pair&lt;EquipmentSlot, ItemStack&gt;&gt; items, ServerPlayerEntities player) {\n    var list = new ArrayList&lt;Pair&lt;EquipmentSlot, ItemStack&gt;&gt;(map.size());\n    for (var entry : items) {\n        if (entry.getKey() == EquipmentSlot.HEAD) {\n            continue;\n        } else {\n            list.add(Pair.of(entry.getKey(), entry.getValue()));\n        }\n    }\n    list.add(new Pair&lt;&gt;(EquipmentSlot.HEAD, new ItemStack(Items.WITHER_SKELETON_SKULL)));\n\n    return list;\n}\n</code></pre>"},{"location":"polymer-core/entities/#modifying-client-side-data-trackers","title":"Modifying client-side data trackers","text":"<p>For more control over entity, you can modify DataTracker values send to client directly. To do it, you need to override <code>void modifyRawTrackedData(List&lt;DataTracker.SerializedEntry&lt;?&gt;&gt; data, ServerPlayerEntity player, boolean initial)</code> method. You should also be safe around it, as sending DataTracker.Entry's, that don't exist on client-side entity representation will cause issues and errors!</p> <p>To get <code>TrackedData</code>, which is needed to create Entries, you can either use accessors, or manually construct the data.</p> <p>Example use:</p> <p>Adding villager data to change how villager looks</p> <pre><code>@Override\npublic void modifyRawTrackedData(List&lt;DataTracker.SerializedEntry&lt;?&gt;&gt; data, ServerPlayerEntity player, boolean initial) {\n    data.add(DataTracker.SerializedEntry.of(VillagerEntityAccessor.getVillagerData(), new VillagerData(VillagerType.JUNGLE, VillagerProfession.FARMER, 3);));\n}\n</code></pre>"},{"location":"polymer-core/getting-started/","title":"Getting Started","text":"<p>This is the first and most important library for server side development.</p> <p>It allows you to create blocks, items and entities, that not only will work fully on server side (and singleplayer), but also are represented on server the same as normal (vanilla/modded) ones allowing for way better mod compatibility and way less weird edge-cases.</p> <p>This library also handles all mod compatibility with client only mods (when it's present), so it can be safely used in a modpack.</p>"},{"location":"polymer-core/getting-started/#adding-to-dependencies","title":"Adding to dependencies","text":"<pre><code>repositories {\n    maven { url 'https://maven.nucleoid.xyz' } // You should have it\n}\n\ndependencies {\n    modImplementation include(\"eu.pb4:polymer-core:[TAG]\")\n}\n</code></pre> <p>For <code>[TAG]</code>/polymer-core version I recommend you checking this maven.</p> <p>Latest version: </p>"},{"location":"polymer-core/getting-started/#before-starting","title":"Before starting","text":"<p>There are few things you need to keep in mind while using Polymer. All your code that interacts with Polymer should:</p> <ul> <li>Be thread safe - code can run on main server thread, player's connection thread   or client side rendering thread.</li> <li>Make sure to check every time you cast if it's really instance of it. Sometimes <code>World</code> won't be a <code>ServerWorld</code> instance.</li> <li>Never implement Polymer interfaces on Vanilla Items/Blocks with mixins, it will end up really, really badly.</li> <li>Never add new BlockStates to non-polymer blocks, as it will cause desyncs (see previous point)!</li> <li>Please don't even try using registry replacement, it will break many other mods (and polymer itself).</li> </ul> <p>Polymer is split into multiple libraries with varying functionality.</p>"},{"location":"polymer-core/items/","title":"Items","text":"<p>Note</p> <p>These docs will only take care about polymer-related part of creation of items. You might want to see official Fabric Wiki for more in depth look into how to create items.  You can skip some client side specific things, as it won't take effect server side (excluding item groups, as they can be used by other mods)</p>"},{"location":"polymer-core/items/#creation-of-items","title":"Creation of items","text":"<p>Creation of items is mostly the same as vanilla. Only real difference is that your items need to  implement Polymer's <code>PolymerItem</code> interface. It exposes few defaulted methods for manipulation of client side visuals.</p>"},{"location":"polymer-core/items/#default-implementation","title":"Default implementation","text":"<p>For most basic uses, there are default implementation of <code>PolymerItem</code>:</p> <ul> <li><code>SimplePolymerItem</code> - Same as vanilla <code>Item</code>,</li> <li><code>PolymerSpawnEggItem</code> - Same as vanilla <code>SpawnEggItem</code>,</li> <li><code>PolymerBlockItem</code> - Same as vanilla <code>BlockItem</code>,</li> <li><code>PolymerHeadBlockItem</code> - Similar to <code>PolymerBlockItem</code>, but for Blocks implementing <code>PolymerHeadBlock</code> interface.</li> </ul>"},{"location":"polymer-core/items/#selecting-visual-item-type","title":"Selecting visual item type.","text":"<p>To select visual item type, you need to implement this method * <code>Item getPolymerItem(ItemStack itemStack, @Nullable ServerPlayerEntity player)</code></p> <p>They can't return nulls. They can also point to other PolymerItem instance, but keep in mind to make validation if it's configurable by user!</p> <p>Example use:</p> <p>Changing client-side item to diamond</p> <pre><code>@Override\npublic Item getPolymerItem(ItemStack itemStack, @Nullable ServerPlayerEntity player) {\n    return itemStack.getCount() &gt; 32 ? Items.DIAMOND_BLOCK : Items.DIAMOND;\n}\n</code></pre>"},{"location":"polymer-core/items/#manipulation-of-client-side-itemstack","title":"Manipulation of client side ItemStack","text":"<p>Sometimes it's useful to manipulate entire ItemStack, as it allows achieving better effects. To do so, you need to override the <code>ItemStack getPolymerItemStack(ItemStack itemStack, TooltipContext context, @Nullable ServerPlayerEntity player)</code> method. However, keep in mind that making nbt incorrect might create some issues (for example  breaking items in creative mode)!</p> <p>Ideally you should modify output of <code>PolymerItem.super.getPolymerItemStack(itemStack, context, player)</code>, <code>PolymerItemUtils.createItemStack(itemStack, player)</code> or <code>PolymerItemUtils.createMinimalItemStack(itemStack, player)</code>, as they contain all required NBT.</p> <p>Example use:</p> <p>Adding enchanting glint to item.</p> <pre><code>@Override\npublic ItemStack getPolymerItemStack(ItemStack itemStack, TooltipContext context, ServerPlayerEntity player) {\n    ItemStack out = PolymerItemUtils.createItemStack(itemStack, context, player);\n    out.addEnchantment(Enchantments.LURE, 0);\n    return out;\n}\n</code></pre>"},{"location":"polymer-core/items/#support-of-modelscustommodeldata","title":"Support of models/CustomModelData","text":"<p>You can change custom model data of virtual model by simple  overriding <code>int getPolymerCustomModelData(ItemStack itemStack, @Nullable ServerPlayerEntity player)</code>. You can return -1 to disable it, or any number above it to set value of it.</p> <p>Ideally you should return value created with polymer's resource pack utils,  but nothing blocks you from using any other ones.</p> <p>Example usage:</p> <p>Changing client-side item CustomModelData to previously stored value.</p> <pre><code>@Override\npublic int getPolymerCustomModelData(ItemStack itemStack, @Nullable ServerPlayerEntity player) {\n    // Instance of PolymerModelData, see info above\n    return this.cmd.value();\n}\n</code></pre>"},{"location":"polymer-core/items/#item-groups-support","title":"Item Groups support","text":"<p>You can create server side Item Groups, which will be later synced with Polymer-compatible clients. They also allow you to create server side Creative categories, that are accessible via <code>/polymer creative</code> command.</p> <p>To create, it, you just need to call one of provided <code>PolymerItemGroupUtils.builder()</code> static method. Then you can create it just like regular ItemGroup, but instead of registering into vanilla registry, you use `PolymerItemGroupUtils.registerPolymerItemGroup(Identifier id, ItemGroup group)</p>"},{"location":"polymer-core/items/#manipulation-of-non-polymer-items","title":"Manipulation of non-polymer items","text":"<p>Sometimes, you might want to manipulate other vanilla/modded items without implementing <code>PolymerItem</code> on them. You can do it by using few events from <code>PolymerItemUtils</code>.</p>"},{"location":"polymer-core/items/#forcing-items-to-go-through-polymer","title":"Forcing items to go through Polymer","text":"<p>To force items to go through polymer's client side item creation, you need to register event handler for <code>PolymerItemUtils.ITEM_CHECK</code> event. You can register it by using  <code>PolymerItemUtils.ITEM_CHECK.register(ItemStack -&gt; boolean)</code> lambda.</p> <p>Example use:</p> <p>Making every item with string NBT tag of \"Test\" go through polymer</p> <pre><code>PolymerItemUtils.ITEM_CHECK.register(\n    (itemStack) -&gt; {\n        return itemStack.hasNbt() &amp;&amp; itemStack.getNbt().contains(\"Test\", NbtElement.STRING_TYPE);\n    }\n);\n</code></pre>"},{"location":"polymer-core/items/#modification-of-client-side-item","title":"Modification of Client side item","text":"<p>After getting vanilla (or for any PolymerItem by default) you can modify any client side item with <code>PolymerItemUtils.ITEM_MODIFICATION_EVENT</code> event. Just keep in mind doing it incorrectly can cause issues (mostly around creative mode, but also in case you modify original item). You change the client side item by either directly modifying client ItemStack  or creating new one and returning it. Ideally you should also keep previous nbt,  just so it can work nicely, You can register this event by using <code>PolymerItemUtils.ITEM_MODIFICATION_EVENT.register(((ItemStack original, ItemStack client, ServerPlayerEntity player) -&gt; ItemStack)</code> lambda.</p> <p>Example use:</p> <p>Hiding enchantment glint for items with <code>HideEnchantments: 1b</code> nbt tag</p> <pre><code>PolymerItemUtils.ITEM_MODIFICATION_EVENT.register(\n    (original, client, player) -&gt; {\n         if (original.hasNbt() &amp;&amp; original.getNbt().getBoolean(\"HideEnchantments\")) {\n             client.getNbt().remove(\"Enchantments\");\n\n         }\n         return client;\n    }\n);\n</code></pre> <p>Replacing look/name of ItemStack with \"Test\" NBT tag</p> <pre><code>PolymerItemUtils.ITEM_MODIFICATION_EVENT.register(\n    (original, client, player) -&gt; {\n         if (original.hasNbt() &amp;&amp; original.getNbt().contains(\"Test\", NbtElement.STRING_TYPE)) {\n             ItemStack out = new ItemStack(Items.DIAMOND_SWORD, client.getCount());\n             out.setNbt(client.getNbt());\n             out.setCustomName(new LiteralText(\"TEST VALUE: \" + original.getNbt().getString(\"Test\")).formatted(Formatting.WHITE));\n             return out;\n         }\n         return client;\n    }\n);\n</code></pre>"},{"location":"polymer-core/items/#making-items-mining-calculated-on-server-side","title":"Making items mining calculated on server side","text":"<p>You can also force item's mining speed to be calculated server side  (which happens by default to every PolymerItem).</p> <p>Only thing you need to do is just listening to <code>PolymerBlockUtils.SERVER_SIDE_MINING_CHECK</code> event.</p> <p>Example use:</p> <pre><code>PolymerBlockUtils.SERVER_SIDE_MINING_CHECK.register(\n    (player, pos, blockState) -&gt; {\n         var itemStack = player.getMainHandStack();\n         return EnchantmentHelper.getLevel(MyEnchanments.SLOW_MINING, itemStack) &gt; 0;\n    }\n);\n</code></pre>"},{"location":"polymer-core/items/#enchantments","title":"Enchantments","text":"<p>The only thing to make your enchantment fully server side is implementation of <code>PolymerSyncedObject</code> or <code>PolymerEnchantment</code> interface. You also might want to manipulate some things from Polymer Block/Item events.</p>"},{"location":"polymer-core/other/","title":"Other custom features","text":""},{"location":"polymer-core/other/#soundevents","title":"SoundEvents","text":"<p>Polymer has support for creating custom sound events, that can fallback to vanilla sounds  for players without resource packs and resource pack ones if they are present.</p> <p>To use it, you just need to create new instance of <code>PolymerSoundEvent</code>. You can use it similarly to vanilla ones.</p>"},{"location":"polymer-core/other/#custom-statistics","title":"Custom statistics","text":"<p>To register custom, server side statistic you just need to call <code>PolymerStat.registerStat(Identifier, StatFormatter)</code>. Then you can use it just like vanilla ones.</p>"},{"location":"polymer-core/other/#statuseffects","title":"StatusEffects","text":"<p>To create custom, server side status effects, you just need to implement PolymerStatusEffect on your  custom StatusEffect class. You can also override <code>StatusEffect getPolymerReplacement(ServerPlayerEntity player)</code> to display it as vanilla one or null to make it invisible (default).</p>"},{"location":"polymer-networking/getting-started/","title":"Getting Started","text":"<p>This is module of Polymer containing all client &lt;-&gt; server networking apis, including some more uncommon ones.</p>"},{"location":"polymer-networking/getting-started/#adding-to-dependencies","title":"Adding to dependencies","text":"<pre><code>repositories {\n    maven { url 'https://maven.nucleoid.xyz' } // You should have it\n}\n\ndependencies {\n    modImplementation include(\"eu.pb4:polymer-networking:[TAG]\")\n}\n</code></pre> <p>For <code>[TAG]</code>/polymer-blocks version I recommend you checking this maven.</p> <p>Latest version: </p>"},{"location":"polymer-resource-pack/basics/","title":"Basics","text":""},{"location":"polymer-resource-pack/basics/#registering-assets","title":"Registering assets","text":"<p>This is quite simple. You just need to do things written below. Ideally it all should run at your mod's initialization.</p>"},{"location":"polymer-resource-pack/basics/#adding-mod-assets-to-resource-pack","title":"Adding mod assets to resource pack","text":"<p>First step for adding assets to resource pack is marking mod as asset source. To do it you just need to call <code>boolean PolymerResourcePackUtils.addModAssets(String modid)</code>, which  returns <code>true</code> if <code>modid</code> is valid.</p> <p>This should be called ideally in your mod initializer.</p> <p>Additionally, you can add assets manually by calling <code>ResourcePackBuilder.addData(String path, byte[] data)</code>. You can get instance of it by listening to <code>PolymerResourcePackUtils.RESOURCE_PACK_CREATION_EVENT</code>. Just keep in minds that new one will be created every time resource pack is generated.</p>"},{"location":"polymer-resource-pack/basics/#requesting-model-for-item","title":"Requesting model for item","text":"<p>After that you can register your models by calling  <code>PolymerModelData PolymerResourcePackUtils.requestModel(Item vanillaItem, Identifier modelPath)</code>. It returns <code>PolymerModelData</code> with contains all information you need for applying custom model data to your items. You need to keep in mind, that modelPath needs to contain main directory (in similar way to vanilla models). While model is created, all it's overrides are copied and applied, so you don't need to request them manually (useful for bows).</p> <p>You can execute this function before making your mod an asset source, but it should be run before resource pack is build.</p> <p>Example use:</p> <pre><code>PolymerModelData modelData = PolymerResourcePackUtils.requestModel(Items.IRON_SWORD, Identifier.of(\"mymod\", \"item/silver_sword\"));\n</code></pre>"},{"location":"polymer-resource-pack/basics/#requesting-armor-textures","title":"Requesting armor textures","text":"<p>Polymer supports custom armor textures thanks to usage of Ancientkingg's fancyPants resource pack.</p> <p>To request it you need to use <code>PolymerResourcePackUtils.requestArmor(Identifier)</code>.  It will automatically create variant of every armor peace, however you aren't  required to use/define them all.</p> <p>To apply it to your armor, you need to set your client side item to leather armor peace. Then you need to override <code>PolymerItem.getPolymerArmorColor()</code> method and return used color.</p> <pre><code>PolymerArmorModel armorModel = PolymerResourcePackUtils.requestArmor(Identifier.of(\"mymod\", \"silver\"));\n</code></pre>"},{"location":"polymer-resource-pack/basics/#checking-players","title":"Checking players","text":"<p>Checking if player has resource pack is quite simple.  You just need to call <code>boolean PolymerResourcePackUtils.hasPack(ServerPlayerEntity player)</code>.</p> <p>Example use:</p> <pre><code>Identifier font;\n\nif (PolymerResourcePackUtils.hasPack(player)) {\n    font = Identifier.of(\"mymod\", \"myfont\");\n} else {\n    font = Identifier.of(\"minecraft\", \"default\");\n}\n</code></pre>"},{"location":"polymer-resource-pack/basics/#making-pack-required","title":"Making pack required","text":"<p>To make font required, you just need to call <code>PolymerResourcePackUtil.markAsRequired()</code>.</p> <p>However, Polymer doesn't contain any utilities for sending packs, as it should be implemented by other mods (or use vanilla one). One exception is resource pack on client, which will get effected by that.</p> <p>I also recommend you to keep it optional if it's possible.</p>"},{"location":"polymer-resource-pack/basics/#building-resource-pack","title":"Building resource pack","text":"<p>To create resource pack you only need to execute <code>/polymer generate-pack</code> command. Resource pack will be located in your server folder as <code>polymer-resourcepack.zip</code>.</p>"},{"location":"polymer-resource-pack/getting-started/","title":"Getting Started","text":"<p>This is additional module/extension of Polymer, adding support for textured blocks. It requires server resource pack to be active work correctly.</p>"},{"location":"polymer-resource-pack/getting-started/#adding-to-dependencies","title":"Adding to dependencies","text":"<pre><code>repositories {\n    maven { url 'https://maven.nucleoid.xyz' } // You should have it\n}\n\ndependencies {\n    modImplementation include(\"eu.pb4:polymer-resource-pack:[TAG]\")\n}\n</code></pre> <p>For <code>[TAG]</code>/polymer-blocks version I recommend you checking this maven.</p> <p>Latest version: </p>"},{"location":"polymer-virtual-entity/basics/","title":"Basics","text":"<p>Polymer Virtual Entity API was created to simplify usage of virtual (packet-based) entities with special visual properties. While they might require additional setup for player to be able to see them, they don't affect on server's performance as much. Additionally, they can't be removed by other mods or commands, making them more persistent against accidental breaking and crashes.</p>"},{"location":"polymer-virtual-entity/basics/#virtualelements","title":"VirtualElements","text":"<p>VirtualElements are object controlling single instances of packet entities on client. It allows you to position, rotate and modify any supported properties of selected entities. This api provides multiple builtin ones that are most likely to be used. They need to be used with <code>ElementHolder</code> to be visible. See more in section below.</p> <ul> <li>BlockDisplayElement - Used for displaying blocks. Shows as <code>minecraft:block_display</code> on client,</li> <li>ItemDisplayElement - Used for displaying items. Shows as <code>minecraft:item_display</code> on client,</li> <li>TextDisplayElement - Used for displaying text. Shows as <code>minecraft:text_display</code> on client,</li> <li>InteractionElement - Used for detecting interactions. Shows as <code>minecraft:interaction</code> on client,</li> <li>MarkerElement - Used for attaching other entities (more later). Shows as <code>minecraft:armor_stand</code> with marker properties on client,</li> <li>MobAnchorElement - Similar to MarkerElement, but allows for more effects. Shows as invisible <code>minecraft:slime</code> of size 0.</li> </ul> <p>There are also multiple abstract classes and main <code>VirtualElement</code> interface you can use to implement things in more flexible way.</p> <p>Example usage:</p> <pre><code>// Creation\nvar element = new TextDisplayElement();\n// Changing entity-specific property\nelement.setText(Text.literal(\"Hello world\");\n// Changing offset\nelement.setOffset(new Vec3d(0, 5, 0));\n// Adding to holder. More info below!\nholder.addElement(element);\n</code></pre>"},{"location":"polymer-virtual-entity/basics/#creating-a-elementholder","title":"Creating a ElementHolder","text":"<p>ElementHolder is main object, that holds and manages ticking and sending of groups of VirtualElements. It can be (and in many cases should be) extended, which can be used to create more dynamic elements without requirement  of backing it with BlockEntity or Entity objects. However, you still need to attach it to make it visible and tick.  This can be done by using attachments. (more in section below).</p> <p>Example usage:</p> <pre><code>var holder = new ElementHolder();\n\nvar element1 = createElement(...);\nvar element2 = createElement(...);\nvar element3 = createElement(...);\n\n// Adding elements\nholder.addElement(element1);\nholder.addElement(element2);\nholder.addElement(element3);\n\n// Removing elements\nholder.removeElement(element3);\n\n/* Attach here */ \n</code></pre>"},{"location":"polymer-virtual-entity/basics/#using-holderattachments","title":"Using HolderAttachments","text":"<p>HolderAttachments are final element, that connects ElementHolders with their position and ticking. There are multiple builtin ones, which different purposes:</p> <ul> <li>EntityAttachment - attaches to any entity.    Can be created with <code>EntityAttachement.of(ElementHolder, Entity)</code>, which requires manual ticking     or <code>EntityAttachement.ofTicking(ElementHolder, Entity)</code> which does that automatically.</li> <li>ChunkAttachment - attaches to a chunk. It's destroyed after chunk gets unloaded.   Can be created with <code>ChunkAttachment.of(ElementHolder, ServerWorld, BlockPos/Vec3d)</code> for manual ticking,   or <code>ChunkAttachment.ofTicking(ElementHolder, ServerWorld, BlockPos/Vec3d)</code> to tick automatically.</li> <li>ManualAttachment - Used as a stub, doesn't handle anything by default. You need to call methods by hand.</li> </ul> <p>Example usage:</p> <pre><code>var holder = new ElementHolder();\n\n/* ... */\n\nEntityAttachment.ofTicking(holder, player);\n</code></pre>"},{"location":"polymer-virtual-entity/getting-started/","title":"Getting Started","text":"<p>This is module of Polymer allowing you to create virtual (packet-only) entities is a quick and simple way. It's mostly designed around using it with Display Entities, but it can be extended to work with any other. You can attach them to regular (or Polymer) entities and chunks.</p>"},{"location":"polymer-virtual-entity/getting-started/#adding-to-dependencies","title":"Adding to dependencies","text":"<pre><code>repositories {\n    maven { url 'https://maven.nucleoid.xyz' } // You should have it\n}\n\ndependencies {\n    modImplementation include(\"eu.pb4:polymer-virtual-entity:[TAG]\")\n}\n</code></pre> <p>For <code>[TAG]</code>/polymer-blocks version I recommend you checking this maven.</p> <p>Latest version: </p>"},{"location":"user/resource-pack-custom-assets/","title":"Adding custom assets to Resource Pack","text":"<p>Polymer has builtin support for adding and overriding assets to generated resource pack. You can do it in multiple ways.</p>"},{"location":"user/resource-pack-custom-assets/#base-folders","title":"Base folders","text":"<p>You can add your assets to <code>polymer/source_assets</code> and/or <code>polymer/override_assets</code> folders. These folders might not exist by default so you will need to create them by hand. The <code>source_assets</code> folder is applied first, before any mod. The <code>override_assets</code> folder is applied last, after generation/copying of most other files. For most cases, you likely want to use <code>source_assets</code>. These folders both use vanilla resource pack structure, with <code>pack.mcmeta</code> and <code>pack.png</code> being optional and replacing default Polymer-generated one.</p>"},{"location":"user/resource-pack-custom-assets/#adding-resource-packs-zips-or-mods","title":"Adding resource packs zips or mods","text":"<p>To add custom resource packs, open <code>config/polymer/resource-pack.json</code> file. Then look at list in <code>\"include_zips\"</code> and add paths to zips with your custom resource packs. These paths are relative to server's root folder. To copy assets from mods, you can either use the zip method or add their modid to <code>\"include_mod_assets\"</code>. Unlike with method above, the only copied folder is included <code>assets</code> folder, ignoring anything else, making it more suitable for merging resource packs without adding invalid metadata.</p> <p>This setting will only update on server restart.</p>"},{"location":"user/resource-pack-hosting/","title":"Hosting Resource Packs","text":"<p>Some Polymer mods (or if you use PolyMc) might require or allow for optional resource packs. Polymer has builtin module (AutoHost) to allow for automatic generation and hosting of resource packs on server start.</p>"},{"location":"user/resource-pack-hosting/#installation-checking-if-its-present","title":"Installation / Checking if it's present","text":"<p>To check if it's present, start the server and check if <code>config/polymer/auto-host.json</code> exists. If it doesn't install correct version of Polymer from Modrinth.</p>"},{"location":"user/resource-pack-hosting/#enabling-autohost","title":"Enabling AutoHost","text":""},{"location":"user/resource-pack-hosting/#for-basic-server-setup-direct-server-without-proxies-reusing-port-0711204-or-newer","title":"For basic server setup (direct server without proxies, reusing port, 0.7.1+1.20.4 or newer)","text":"<p>Start the server at least once. Then open the config file in <code>config/polymer/auto-host.json</code> and change the value in field <code>\"enabled\"</code> from <code>false</code> to <code>true</code>. Then save the file and restart the server! It should automatically apply the resource pack after it finishes generation.</p>"},{"location":"user/resource-pack-hosting/#for-proxy-setups-reuses-port-0711204-or-newer","title":"For proxy setups (reuses port, 0.7.1+1.20.4 or newer)","text":"<p>Do everything as above. If your server is behind proxy, you need to change the string for <code>\"forced_address\"</code> from <code>\"\"</code> to <code>\"http://serveraddress.net:port\"</code> (for example <code>\"http://server.net:25565\"</code>). The port and address isn't required to match server internal one, if you use http proxies.</p>"},{"location":"user/resource-pack-hosting/#custom-port-setup-0481194-or-newer","title":"Custom port setup (0.4.8+1.19.4 or newer)","text":"<p>Start the server at least once. Then open the config file in <code>config/polymer/auto-host.json</code> and change the value in field <code>\"enabled\"</code> from <code>false</code> to <code>true</code>. Next set <code>\"type\"</code> to <code>\"polymer:http_server\"</code>. Then replace <code>\"settings\"</code> with</p> <pre><code>{\n  \"port\": 25567,\n  \"external_address\": \"http://localhost:25567/\"\n}\n</code></pre> <p>You can change port to any other you need, just make sure the external address is accessible from the outside. Then save the file and restart the server! It should automatically apply the resource pack after it finishes generation.</p>"}]}